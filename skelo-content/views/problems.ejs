<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Skelo QC: View All Problems</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Calibri', 'Arial', sans-serif;
            background: #f0f0f0;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border: 1px solid #d0d0d0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .header {
            background: white;
            padding: 20px 30px;
            border-bottom: 2px solid #000;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        h1 {
            font-size: 20px;
            font-weight: 600;
            color: #000;
        }
        
        .nav-links {
            display: flex;
            gap: 10px;
        }
        
        .btn {
            padding: 8px 16px;
            border: 1px solid #000;
            background: white;
            cursor: pointer;
            font-size: 12px;
            font-weight: 600;
            text-decoration: none;
            color: #000;
            display: inline-block;
        }
        
        .btn:hover {
            background: #f0f0f0;
        }
        
        .btn-primary {
            background: #000;
            color: white;
        }
        
        .btn-primary:hover {
            background: #333;
        }
        
        .search-bar {
            padding: 20px 30px;
            border-bottom: 1px solid #d0d0d0;
            background: #fafafa;
        }
        
        .search-input {
            width: 100%;
            padding: 10px;
            border: 1px solid #d0d0d0;
            font-size: 13px;
        }
        
        .search-input:focus {
            outline: none;
            border: 1px solid #000;
        }
        
        .problems-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .problems-table th {
            background: #f0f0f0;
            padding: 12px;
            text-align: left;
            font-weight: 600;
            font-size: 12px;
            border-bottom: 2px solid #d0d0d0;
            position: sticky;
            top: 0;
        }
        
        .problems-table td {
            padding: 12px;
            border-bottom: 1px solid #d0d0d0;
            font-size: 13px;
        }
        
        .problems-table tr:hover {
            background: #fafafa;
        }
        
        .badge {
            padding: 4px 10px;
            border-radius: 3px;
            font-size: 11px;
            font-weight: 600;
            display: inline-block;
        }
        
        .badge-easy {
            background: #d4edda;
            color: #155724;
        }
        
        .badge-medium {
            background: #fff3cd;
            color: #856404;
        }
        
        .badge-hard {
            background: #f8d7da;
            color: #721c24;
        }
        
        .action-buttons {
            display: flex;
            gap: 5px;
        }
        
        .btn-small {
            padding: 4px 10px;
            font-size: 11px;
            border: 1px solid #000;
            background: white;
            cursor: pointer;
        }
        
        .btn-small:hover {
            background: #f0f0f0;
        }
        
        .btn-delete {
            border-color: #dc3545;
            color: #dc3545;
        }
        
        .btn-delete:hover {
            background: #dc3545;
            color: white;
        }
        
        .empty-state {
            padding: 60px 30px;
            text-align: center;
            color: #666;
        }
        
        .empty-state h2 {
            font-size: 18px;
            margin-bottom: 10px;
        }
        
        .loading {
            padding: 40px;
            text-align: center;
            color: #666;
        }

        .lang-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
        }

        .lang-tag {
            background: #e0e0e0;
            padding: 2px 8px;
            border-radius: 3px;
            font-size: 10px;
        }

        .title-link {
            color: #000;
            text-decoration: none;
            font-weight: 600;
        }

        .title-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Skelo QC: All Problems</h1>
            <div class="nav-links">
                <a href="/index" class="btn btn-primary">Create New Problem</a>
            </div>
        </div>
        
        <div class="search-bar">
            <input type="text" class="search-input" id="searchInput" placeholder="Search by title, author, or difficulty...">
        </div>
        
        <div id="loadingState" class="loading">
            Loading problems...
        </div>
        
        <div id="emptyState" class="empty-state" style="display: none;">
            <h2>No Problems Found</h2>
            <p>Start by creating your first problem!</p>
            <a href="/" class="btn btn-primary" style="margin-top: 20px;">Create Problem</a>
        </div>
        
        <table class="problems-table" id="problemsTable" style="display: none;">
            <thead>
                <tr>
                    <th style="width: 30%;">Title</th>
                    <th style="width: 12%;">Author</th>
                    <th style="width: 10%;">Created</th>
                    <th style="width: 10%;">Difficulty</th>
                    <th style="width: 8%;">Test Cases</th>
                    <th style="width: 15%;">Languages</th>
                    <th style="width: 15%;">Actions</th>
                </tr>
            </thead>
            <tbody id="problemsBody">
            </tbody>
        </table>

        <div id="statsSection" style="display: none; padding: 30px; border-top: 2px solid #d0d0d0;">
            <div style="margin-bottom: 30px;">
                <h2 style="font-size: 16px; font-weight: 600; margin-bottom: 15px;">Problems by Author</h2>
                <table class="problems-table">
                    <thead>
                        <tr>
                            <th style="width: 50%;">Author</th>
                            <th style="width: 50%;">Total Problems</th>
                        </tr>
                    </thead>
                    <tbody id="authorStatsBody">
                    </tbody>
                </table>
            </div>

            <div>
                <h2 style="font-size: 16px; font-weight: 600; margin-bottom: 15px;">Problems by Topic</h2>
                <table class="problems-table">
                    <thead>
                        <tr>
                            <th style="width: 50%;">Topic</th>
                            <th style="width: 50%;">Total Problems</th>
                        </tr>
                    </thead>
                    <tbody id="topicStatsBody">
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        let allProblems = [];

        async function loadProblems() {
            try {
                const response = await fetch('/api/problems');
                if (!response.ok) throw new Error('Failed to fetch problems');
                
                allProblems = await response.json();
                
                document.getElementById('loadingState').style.display = 'none';
                
                if (allProblems.length === 0) {
                    document.getElementById('emptyState').style.display = 'block';
                } else {
                    document.getElementById('problemsTable').style.display = 'table';
                    document.getElementById('statsSection').style.display = 'block';
                    displayProblems(allProblems);
                    displayStats(allProblems);
                }
            } catch (error) {
                document.getElementById('loadingState').innerHTML = `
                    <h2>Error Loading Problems</h2>
                    <p>${error.message}</p>
                `;
            }
        }

        function displayStats(problems) {
            // Count by Author
            const authorCounts = {};
            problems.forEach(problem => {
                const author = problem.author || 'Unknown';
                authorCounts[author] = (authorCounts[author] || 0) + 1;
            });

            const authorStatsBody = document.getElementById('authorStatsBody');
            authorStatsBody.innerHTML = '';
            
            Object.entries(authorCounts)
                .sort((a, b) => b[1] - a[1]) // Sort by count descending
                .forEach(([author, count]) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${escapeHtml(author)}</td>
                        <td><strong>${count}</strong></td>
                    `;
                    authorStatsBody.appendChild(row);
                });

            // Count by Topic
            const topicCounts = {};
            problems.forEach(problem => {
                const topic = problem.problemTopic || 'Uncategorized';
                topicCounts[topic] = (topicCounts[topic] || 0) + 1;
            });

            const topicStatsBody = document.getElementById('topicStatsBody');
            topicStatsBody.innerHTML = '';
            
            Object.entries(topicCounts)
                .sort((a, b) => b[1] - a[1]) // Sort by count descending
                .forEach(([topic, count]) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${escapeHtml(topic)}</td>
                        <td><strong>${count}</strong></td>
                    `;
                    topicStatsBody.appendChild(row);
                });
        }

        function displayProblems(problems) {
            const tbody = document.getElementById('problemsBody');
            tbody.innerHTML = '';
            
            problems.forEach(problem => {
                const row = document.createElement('tr');
                
                const createdDate = new Date(problem.createdDate).toLocaleDateString();
                const difficultyClass = `badge-${problem.difficulty.toLowerCase()}`;
                
                row.innerHTML = `
                    <td>
                        <a href="/view/${problem._id}" class="title-link">${escapeHtml(problem.problemTitle)}</a>
                    </td>
                    <td>${escapeHtml(problem.author)}</td>
                    <td>${createdDate}</td>
                    <td><span class="badge ${difficultyClass}">${problem.difficulty}</span></td>
                    <td>${problem.totalTestCases}</td>
                    <td>
                        <div class="lang-tags">
                            ${problem.supportedLanguages.map(lang => 
                                `<span class="lang-tag">${escapeHtml(lang)}</span>`
                            ).join('')}
                        </div>
                    </td>
                    <td>
                        <div class="action-buttons">
                            <a href="/view/${problem._id}" class="btn-small">View</a>
                            <button class="btn-small btn-delete" onclick="deleteProblem('${problem._id}')">Delete</button>
                        </div>
                    </td>
                `;
                
                tbody.appendChild(row);
            });
        }

        async function deleteProblem(id) {
            if (!confirm('Are you sure you want to delete this problem?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/problems/${id}`, {
                    method: 'DELETE'
                });
                
                if (!response.ok) throw new Error('Failed to delete problem');
                
                allProblems = allProblems.filter(p => p._id !== id);
                displayProblems(allProblems);
                
                if (allProblems.length === 0) {
                    document.getElementById('problemsTable').style.display = 'none';
                    document.getElementById('emptyState').style.display = 'block';
                }
            } catch (error) {
                alert('Error deleting problem: ' + error.message);
            }
        }

        document.getElementById('searchInput').addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            
            const filtered = allProblems.filter(problem => {
                return problem.problemTitle.toLowerCase().includes(searchTerm) ||
                       problem.author.toLowerCase().includes(searchTerm) ||
                       problem.difficulty.toLowerCase().includes(searchTerm);
            });
            
            displayProblems(filtered);
        });

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        window.onload = loadProblems;
    </script>
</body>
</html>